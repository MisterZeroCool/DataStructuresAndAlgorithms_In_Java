Приоритетные очереди
    Приоритетная очередь является более специализированной структурой данных,
чем стек или очередь, однако и он неожиданно часто оказывается полезным.
У приоритетной очереди, как и у обычной, имеется начало и конец, а элементы изв-
лекаются от начала. Но у приоритетной очереди элементы упорядочиваются по
ключу, так что элемент с наименьшим (в некоторых реализациях — наибольшим)
значением ключа всегда находится в начале. Новые элементы вставляются в пози-
циях, сохраняющих порядок сортировки.
    Давайте применим нашу аналогию с сортировкой почты к приоритетным очередям.
Каждый раз, когда почтальон отдает вам письмо, вы вкладываете его в стопку
непрочитанных писем в соответствии с приоритетом. Если письмо требует немедле-
нного ответа (телефонная компания собирается отключить ваш модем), оно
кладется наверх, а письма, на которые можно ответить в свободное время (письмо
от любимой тетушки), подкладываются под низ стопки. Письма со средним приори-
тетом размещаются где-то в середине; чем выше приоритет, тем выше оказывается
письмо в стопке. Верх стопки соответствует началу приоритетной очереди.
    Приоритетные очереди (как и обычные) часто используются в компьютерных систе-
мах. Скажем, в операционной системе с вытесняющей многозадачностью программы
могут размещаться в приоритетной очереди, чтобы высокоприоритетная программа
первой получила процессорное время для ее выполнения.
    При работе с приоритетными очередями довольно часто требуется получить
доступ к элементу с наименьшим значением ключа (которое может представлять
самый экономичный или быстрый способ выполнения какой-либо операции) — то
есть самым приоритетным является элемент с наименьшим ключом. Наше обсуж-
дение будет основано именно на таком предположении, хотя во многих ситуациях
самым приоритетным является элемент с наибольшим ключом.
    Кроме ускоренного доступа к элементу с наименьшим ключом, приоритетная
очередь также должна обеспечивать относительно быструю вставку. По этой причине
приоритетные очереди, как упоминалось ранее, часто реализуются на основе
структуры данных, называемой кучей (heap).
Представлена реализация приоритетной очереди на базе простого массива. Ее недо-
статком является медленная вставка; с другой стороны, она проще, а ее применение
более уместно, если количество элементов невелико или скорость вставки не критична.

Эффективность приоритетных очередей
В рассмотренной реализации приоритетной очереди вставка выполняется за время
O(N), а извлечение — за время O(1).

