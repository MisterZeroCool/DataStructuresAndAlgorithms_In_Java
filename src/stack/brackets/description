Пример № 2 Поиск парных скобок
Стеки также часто используются при разборе некоторых видов текстовых строк.
Чтобы дать представление о процессе разбора, мы рассмотрим программу для
проверки парных скобок в строке, введенной пользователем. Строка не обязана
содержать настоящий Java-код (хотя это вполне возможно), но скобки в ней
должны использоваться по правилам Java. Нас интересуют фигурные скобки { },
квадратные [ ] и круглые скобки ( ). Каждая открывающая (левая) скобка должна
иметь парную закрывающую (правую) скобку, то есть для каждой скобки { должна
существовать парная скобка } и т. д. Кроме того, открывающие скобки ближе
к концу строки закрываются раньше тех, которые расположены ближе к началу.
Несколько примеров:
c[d] // Правильно
a{b[c]d}e // Правильно
a{b(c]d}e // Неправильно; ] не соответствует (
a[b{c}d]e} // Неправильно; у завершающей скобки } нет пары
a{b(c) // Неправильно; у открывающей скобки { нет пары

Открывающие скобки в стеке
Программа поиска парных скобок последовательно читает символы строки и заносит
обнаруженные открывающие скобки в стек. Обнаружив во входных данных
закрывающую скобку, она извлекает верхний элемент из стека и проверяет его на
соответствие закрывающей скобке. Если они относятся к разным типам (скажем,
открывающая фигурная скобка с закрывающей круглой скобкой), происходит
ошибка. Кроме того, если в стеке нет открывающей скобки, парной по отношению
к закрывающей, или если для какой-то скобки в конечном итоге не нашлось пары,
происходит ошибка. Найти непарный ограничитель несложно — он остается в стеке
после того, как будут прочитаны все символы в строке.
Давайте посмотрим, как будет заполняться стек для типичной синтаксически
правильной строки:
a{b(c[d]e)f}

В процессе чтения строки каждая открывающая скобка помещается в стек.
Каждая закрывающая скобка, прочитанная из входных данных, сопоставляется с
открывающей скобкой, извлеченной с вершины стека. Если они образуют
пару — все хорошо. В стек заносятся только скобки; все остальные символы просто
игнорируются.
Такое решение работает, так как пара скобок, открытая последней, будет закрыта
первой — стоит напомнить, что стек работает по принципу LIFO.

Эффективность стеков
Занесение и извлечение элементов из стека, реализованного в классе StackX,
выполняется за время O(1). Иначе говоря, время выполнения операции не зависит от
количества элементов в стеке; следовательно, операция выполняется очень быстро,
не требуя ни сравнений, ни перемещений.