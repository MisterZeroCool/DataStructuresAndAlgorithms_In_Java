Пример пузырьковой сортировки
    Представьте, что вы близоруки (как компьютерная программа) и видите не более
двух игроков одновременно и только если они стоят вплотную друг к другу. Как бы
вы отсортировали игроков при таких ограничениях? Допустим, команда состоит
из N игроков, а их позиции пронумерованы от 0 до N–1.
    Алгоритм пузырьковой сортировки работает так: вы подходите к левому краю
шеренги (позиция 0) и сравниваете двух игроков в позициях 0 и 1. Если левый
игрок (позиция 0) выше, вы меняете их местами. Если выше правый игрок, они
остаются на своих местах. Затем вы переходите на одну позицию вправо и срав-
ниваете игроков в позициях 1 и 2. И снова, если левый игрок выше, вы меняете их
местами.
Сортировка выполняется по следующим правилам:
1. Сравнить двух игроков.
2. Если левый игрок выше, поменять их местами.
3. Перейти на одну позицию вправо.
Перестановки продолжаются до тех пор, пока не будет достигнут правый край
шеренги. Сортировка еще не завершена, но по крайней мере самый высокий игрок
стоит в крайней правой позиции. Это происходит всегда: как только вы встретите
самого высокого игрока, вы будете переставлять его при каждом сравнении, пока
он (в конечном итоге) не перейдет в крайнюю правую позицию. Именно поэтому
алгоритм называется «пузырьковой сортировкой»: в ходе его работы самый большой
элемент, словно пузырек в жидкости, всплывает до конца массива.
При первом проходе по всем данным выполняется N–1 сравнений и от 0 до
N–1 перестановок (в зависимости от начального расположения игроков). Элемент
в конце массива находится на своем месте и снова перемещаться уже не будет.
Теперь алгоритм возвращается к началу шеренги и начинает следующий проход.
Он снова последовательно перемещается слева направо, сравнивая элементы
и переставляя их в случае необходимости. На этот раз перебор останавливается за
один элемент до конца, в позиции N–2, потому что последняя позиция (N–1) уже
гарантированно содержит наибольший элемент.
Это правило можно сформулировать следующим образом:
4. После того как первый отсортированный элемент окажется на своем месте,
вернуться к началу массива.

Основной код метода bubbleSort() состоит всего из четырех строк:
public void bubbleSort(){
    int out, in;
    for(out=nElems-1; out>1; out--)   // Внешний цикл (обратный)
        for(in=0; in<out; in++)              // Внутренний цикл (прямой)
            if( a[in] > a[in+1] )                // Порядок нарушен?
                swap(in, in+1);                  // Поменять местами
}

    В результате сортировки наименьший элемент должен находиться в начале массива (индекс 0),
а наибольший — в конце (индекс nElems-1). Счетчик цикла out внешнего цикла for начинает перебор
с конца массива (в позиции nElems-1) и последовательно уменьшается в процессе перебора.
Элементы с индексами, большими out, находятся на своих окончательных местах. Переменная out
смещается влево после каждого прохода, чтобы алгоритм не затрагивал уже отсортированные элементы.
    Счетчик in начинается с начала массива и последовательно увеличивается при
каждой итерации внутреннего цикла вплоть до out. Внутренний цикл сравнивает
две ячейки, на которые указывают in и in+1, и если элемент в ячейке in больше
элемента в ячейке in+1 — меняет их местами.
    Для наглядности перестановка элементов выполняется отдельным методом
swap().

Сложность пузырьковой сортировки:
- пузырьковая сортировка выполняется за время O(N2). Это достаточно медленно!!!