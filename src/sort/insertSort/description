Сортировка методом вставки
В большинстве случаев сортировка методом вставки является лучшим из элемен-
тарных алгоритмов сортировки, описанных в этой главе. Она также выполняется
за время O(N 2), но работает примерно вдвое быстрее пузырьковой сортировки,
а в обычных ситуациях немного быстрее сортировки методом выбора. Кроме того,
сортировка методом вставки не слишком сложна, хотя ее алгоритм немного сложнее
двух других. Она часто используется на завершающей стадии более сложных
алгоритмов, например быстрой сортировки.

Реализация сортировки методом вставки
на языке Java
Следующий метод из программы insertSort.java выполняет сортировку методом
вставки:
public void insertionSort(){
    int in, out;
    for(out=1; out<nElems; out++){                    // out - разделительный маркер
        long temp = a[out];                                    // Скопировать помеченный элемент
        in = out;                                                     // Начать перемещения с out
        while(in>0 && a[in-1] >= temp){                 // Пока не найден меньший элемент
            a[in] = a[in-1];                                       // Сдвинуть элемент вправо
            --in;                                                       // Перейти на одну позицию влево
        }
        a[in] = temp;                                              // Вставить помеченный элемент
    }
}
    Во внешнем цикле for счетчик начинает с позиции 1 и двигается вправо. Он
отмечает крайний левый неотсортированный элемент. Во внутреннем цикле while
счетчик in начинает с позиции out и двигается влево — либо пока temp не станет
меньше элемента массива, либо когда дальнейшее смещение станет невозможным.
При каждом проходе по циклу while следующий отсортированный элемент сдвига-
ется на одну позицию вправо.

Сложность сортировки методом вставки
Сколько операций сравнения и копирования требует этот алгоритм? При первом
проходе сравнивается не более одного элемента, на втором — не более двух и так
далее, вплоть до N – 1 сравнений на последнем проходе. В сумме получается:
1 + 2 + 3 + … + N – 1 = N × (N – 1)/2.
Тем не менее, поскольку при каждом проходе в среднем фактически сравнивается
только половина от максимального количества элементов (прежде чем будет
найдена точка вставки), сумму можно уменьшить вдвое; получается:
N × N–1)/4.
Количество операций копирования приблизительно совпадает с количеством
сравнений. Однако копирование занимает меньше времени, чем перестановка, так
что для случайных данных этот алгоритм работает вдвое быстрее пузырьковой
сортировки и быстрее сортировки методом выбора. Как бы то ни было, как и во
всех остальных методах сортировки этой главы, для случайных данных сортировка
методом вставки выполняется за время порядка O(N 2).
Для данных, уже прошедших предварительную сортировку, этот алгоритм
работает гораздо эффективнее. Если данные упорядочены, то условие цикла while
никогда не бывает истинным; следовательно, оно вырождается в простую команду
во внешним цикле, выполняемую N – 1 раз. В этом случае алгоритм выполняется
за время O(N). Если данные почти отсортированы, то сортировка методом вставки
выполняется почти за время O(N ), а следовательно, является простым и эффектив-
ным способом упорядочения файлов данных с небольшими отклонениямив порядке
сортировки.