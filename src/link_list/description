Связанные списки
    Гибкость связанных списков хорошо подходит для многих общих задач хранения данных.
Кроме того, связанный список может заменить массив в качестве базы для других структур
хранения данных (таких, как стеки и очереди).

Строение
    В связанном списке каждый элемент данных встраивается в специальный объект, называемый
списка (классу, на основе которого создаются такие объекты, часто присваивается имя Link).
Так как список содержит много однотипныхэлементов, для них удобно создать отдельный класс,
отличный от класса самого связанного списка. Каждый элемент (то есть объект Link) содержит
ссылку на следующий элемент списка; поле, в котором эта ссылка хранится, обычно называется
next. Объект списка содержит ссылку на первый элемент first.

Ссылки и базовые типы
Включение поля типа Link в определение класса того же типа на первый взгляд выглядит немного
странно. Разве компилятор не запутается? Как он определит,сколько памяти выделить под объект
Link, если объект содержит сам себя, а компилятор еще не знает, сколько памяти занимает объект
Link?
Дело в том, что в языке Java объект Link не содержит другой объект Link. Поле next типа Link содер-
жит только ссылку на другой элемент списка, а не сам объект.
Ссылка представляет собой число, ассоциированное с объектом. Это число соответствует адресу
объекта в памяти компьютера, но его конкретное значение вас не интересует; просто считайте, что
это «волшебное число» определяет местонахождение объекта. Для конкретного компьютера и
операционной системы все ссылки, на что бы они ни ссылались, всегда имеют одинаковый размер.
Таким образом, компилятор легко вычислит размер поля, а следовательно, сконструирует весь объект
Link.

Отношения вместо конкретных позиций
Рассмотрим одно из важнейших отличий между связанными списками и массивами. В массиве каждый
элемент всегда занимает конкретную позицию и к нему можно обратиться напрямую по индексу. Все
происходит, как при поиске дома на незнакомой улице: нужный дом легко находится по адресу.
В списке конкретный элемент можно найти только одним способом: отследив его по цепочке элементов
от начала списка. Поиск больше напоминает отношения между людьми. Допустим, вы спрашиваете Гарри,
где находится Боб. Гарри этого не знает, но он думает, что Джейн может вам помочь. Вы идете и спрашиваете
Джейн. Она видела, что Боб уходил из офиса с Салли; вы звоните на сотовый телефон Салли. Оказывается,
Салли рассталась с Бобом у офиса Питера… В общем, вы поняли. Обратиться к элементу данных напрямую
невозможно, для поиска приходится использовать отношения между элементами. Вы начинаете с первого
элемента, переходите ко второму, потом к третьему — пока не найдете тот, который вам нужен.

Простой связанный список
В нашем первом примере linkList.java представлен простой связанный список.
Эта разновидность списка поддерживает следующие операции:
- Вставка элемента в начале списка.
- Удаление элемента в начале списка.
- Перебор списка для вывода содержимого.
    Все операции выполняются относительно просто, поэтому мы начнем с них.
(Как вы увидите позднее, эти операции — все, что необходимо для использования
связанного списка в качестве основы для реализации стека.)
    Но прежде чем разбирать код программы linkList.java, мы рассмотрим важнейшие составляющие классов
Link и LinkList.

Чтобы вставить в список новый элемент, достаточно присвоить полю next созданного объекта ссылку на
предыдущий первый элемент, а затем изменить поле first так, чтобы оно указывало на только что встав-
ленный элемент.